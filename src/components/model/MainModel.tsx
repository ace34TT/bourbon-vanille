/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF, useScroll } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Vector3 } from "three";
import { useContext, useEffect, useLayoutEffect, useRef } from "react";
import { useThree, useFrame } from "@react-three/fiber";
import gsap from "gsap";
import { TransitionContext } from "../../context/TransitionContaxt";
import { transitions } from "../../interfaces/ITransition";
type GLTFResult = GLTF & {
  nodes: {
    Circle035: THREE.Mesh;
    Circle030: THREE.Mesh;
  };
  materials: {
    ["Sisal Rope"]: THREE.MeshStandardMaterial;
    ["Stylized Tree Truck"]: THREE.MeshStandardMaterial;
  };
};
export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "models/Vanilla-transformed.glb"
  ) as GLTFResult;
  const modelRef = useRef<THREE.Group>(null);
  //
  // const tl = useRef<gsap.core.Timeline | null>(null);
  // const scroll = useScroll();
  // useFrame(() => {
  //   tl.current?.seek(scroll.offset * tl.current.duration());
  // });
  // useLayoutEffect(() => {
  //   tl.current = gsap.timeline();
  //   if (modelRef.current) {
  //     tl.current.to(
  //       modelRef.current.position,
  //       {
  //         duration: 2,
  //         x: -10,
  //         y: -0.8,
  //       },
  //       0
  //     );
  //     tl.current.to(
  //       modelRef.current.rotation,
  //       {
  //         duration: 2,
  //         x: Math.PI / 2,
  //         y: Math.PI / 2,
  //         z: Math.PI / 2,
  //       },
  //       0
  //     );
  //   }
  //   //
  // }, []);
  const { setIndex, index } = useContext(TransitionContext);
  useEffect(() => {
    console.log(index);
    if (index >= 0 && index < 3) {
      gsap.to(modelRef.current!.position, {
        duration: 1,
        x: transitions[index].model.position[0],
        y: transitions[index].model.position[1],
        z: transitions[index].model.position[2],
      });
      gsap.to(modelRef.current!.rotation, {
        duration: 1,
        x: transitions[index].model.rotation[0],
        y: transitions[index].model.rotation[1],
        z: transitions[index].model.rotation[2],
      });
    }
  }, [index]);

  return (
    <group
      {...props}
      dispose={null}
      scale={[0.07, 0.07, 0.04]}
      ref={modelRef}
      position={[0.75, -0.6, -0.055]}
      rotation={[0.003, 0.651, -3.13]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Circle035.geometry}
        material={materials["Sisal Rope"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Circle030.geometry}
        material={materials["Stylized Tree Truck"]}
      />
    </group>
  );
}

useGLTF.preload("models/Vanilla-transformed.glb");
