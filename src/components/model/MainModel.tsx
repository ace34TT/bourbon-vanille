/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { MutableRefObject, useLayoutEffect, useRef, useState } from "react";
import gsap from "gsap";
import { useFrame, useThree } from "react-three-fiber";
import { OrthographicCamera as OrthographicCameraType } from "three";
type GLTFResult = GLTF & {
  nodes: {
    Circle035: THREE.Mesh;
    Circle030: THREE.Mesh;
  };
  materials: {
    ["Sisal Rope"]: THREE.MeshStandardMaterial;
    ["Stylized Tree Truck"]: THREE.MeshStandardMaterial;
  };
};

interface ModelProps {
  cameraRef: MutableRefObject<OrthographicCameraType | undefined>;
  containerRef: any;
  [key: string]: any; // This line allows any other property
}
export function Model({ cameraRef, containerRef, ...props }: ModelProps) {
  const { nodes, materials } = useGLTF(
    "models/Vanilla-transformed.glb"
  ) as GLTFResult;
  const modelRef = useRef<THREE.Group>(null);
  const [scrollOffset, setScrollOffset] = useState(0);
  const tl = useRef<GSAPTimeline>();
  useFrame(() => {
    if (!tl.current) return;
    tl.current.seek(scrollOffset * tl.current.duration());
  });

  const { size } = useThree();
  const scale = Math.min(size.width, size.height) / 11;
  const defaultScaleValue = {
    x: 0.073 * scale,
    y: 0.073 * scale,
    z: 0.04 * scale,
  };
  useLayoutEffect(() => {
    const targetX = (-60 * size.width) / 1000;
    if (!modelRef.current || !cameraRef.current) return;
    tl.current = gsap.timeline();
    tl.current.to(
      modelRef.current.position,
      { duration: 1, x: targetX, y: -0.1, z: -5 },
      0
    );
    tl.current.to(
      modelRef.current.scale,
      {
        duration: 1,
        x: defaultScaleValue.x * 2,
        y: defaultScaleValue.y * 2,
        z: defaultScaleValue.z * 2,
      },
      0
    );
    tl.current.to(
      modelRef.current.rotation,
      { duration: 1, x: Math.PI / 12, y: Math.PI / 3, z: -2.75 },
      0
    );
    //
    tl.current.to(
      modelRef.current.rotation,
      { duration: 1, y: -Math.PI / 3 },
      1
    );
    //
    tl.current.to(
      modelRef.current.position,
      { duration: 1, x: targetX, y: 50, z: -5 },
      2
    );
    tl.current.to(
      modelRef.current.rotation,
      { duration: 1, x: Math.PI / 16 },
      2
    );
    //
    tl.current.to(
      modelRef.current.position,
      { duration: 1, x: targetX, y: -25, z: -5 },
      3
    );
    tl.current.to(
      modelRef.current.rotation,
      { duration: 1, y: Math.PI / 3 },
      3
    );
    //
    tl.current.to(
      modelRef.current.position,
      { duration: 1, x: -0, y: -10, z: -5 },
      4
    );
    tl.current.to(
      modelRef.current.rotation,
      { duration: 1, y: (5 * Math.PI) / 6 },
      4
    );
    tl.current.to(
      modelRef.current.scale,
      {
        duration: 1,
        x: defaultScaleValue.x / 1.4,
        y: defaultScaleValue.y / 1.4,
        z: defaultScaleValue.z / 1.4,
      },
      4
    );
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const handleScroll = () => {
    const { scrollTop, clientHeight } = document.documentElement;
    const newScrollOffset = scrollTop / (clientHeight * 5 - clientHeight);
    setScrollOffset(newScrollOffset);
  };
  useLayoutEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <group
      {...props}
      dispose={null}
      scale={[defaultScaleValue.x, defaultScaleValue.y, defaultScaleValue.z]}
      ref={modelRef}
      position={[75, -50, -5]}
      rotation={[0.003, 0.651, -3.13]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Circle035.geometry}
        material={materials["Sisal Rope"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Circle030.geometry}
        material={materials["Stylized Tree Truck"]}
      />
    </group>
  );
}

useGLTF.preload("models/Vanilla-transformed.glb");
